<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>VCE Legal Studies Pictionary - Units 3 & 4</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f0f8ff; color: #333; text-align: center; }
        #login { margin: 50px; }
        input, select, button { padding: 10px; margin: 5px; }
        #game { display: none; }
        #canvas { border: 2px solid #000; background: white; cursor: crosshair; }
        #chat { height: 200px; overflow-y: scroll; border: 1px solid #ddd; margin: 10px; padding: 10px; text-align: left; }
        #guessInput { width: 200px; }
        .avatar { font-size: 24px; margin: 5px; cursor: pointer; }
        .selected { border: 2px solid #4caf50; border-radius: 50%; }
        #players { margin: 20px; }
        .player { display: inline-block; margin: 5px; padding: 5px; background: #e0f7fa; border-radius: 5px; }
        #scores { margin: 20px; }
        .score { display: inline-block; margin: 10px; padding: 10px; background: #2196f3; color: white; border-radius: 5px; }
        #timer { font-size: 24px; font-weight: bold; color: #d32f2f; }
        #termOptions { display: none; }
        button.term { width: 150px; margin: 5px; background: #4caf50; color: white; border: none; padding: 10px; cursor: pointer; }
        #currentTerm { font-size: 18px; font-weight: bold; margin: 10px; display: none; }
        #controls { margin: 10px; }
        .hidden { display: none; }
    </style>
</head>
<body>
    <h1>VCE Legal Studies Pictionary (Units 3 & 4)</h1>
    <p>Revision game using key terms from Units 3 and 4. Teacher: Use 'teacher' as name to start games.</p>

    <div id="login">
        <input type="text" id="name" placeholder="Enter your name (or 'teacher')" required>
        <select id="avatar">
            <option value="üë®‚Äç‚öñÔ∏è">Judge üë®‚Äç‚öñÔ∏è</option>
            <option value="‚öñÔ∏è">Scales ‚öñÔ∏è</option>
            <option value="üìú">Scroll üìú</option>
            <option value="üèõÔ∏è">Courthouse üèõÔ∏è</option>
            <option value="üîç">Magnify üîç</option>
        </select>
        <br>
        <button onclick="joinGame()">Join Game</button>
    </div>

    <div id="game">
        <div id="players"></div>
        <div id="scores"></div>
        <div id="currentTerm"></div>
        <div id="termOptions"></div>
        <div id="timer"></div>
        <canvas id="canvas" width="600" height="400"></canvas>
        <div id="controls">
            <button onclick="clearCanvas()" id="clearBtn" class="hidden">Clear Canvas</button>
            <input type="text" id="guessInput" placeholder="Guess the term..." class="hidden">
            <button onclick="submitGuess()" id="guessBtn" class="hidden">Guess</button>
            <button onclick="startGame()" id="startBtn" class="hidden">Start Game</button>
            <button onclick="stopGame()" id="stopBtn" class="hidden">Stop Game</button>
        </div>
        <div id="chat"></div>
    </div>

    <script>
        // Key terms from Units 3 & 4
        const terms = [
            "Summary offences", "Indictable offences", "Burden of proof", "Standard of proof", "Presumption of innocence",
            "Right to silence", "Right to trial by jury", "Alternative arrangements", "Victim impact statements", "Fairness",
            "Equality", "Access", "Victoria Legal Aid", "Community legal centres", "Plea negotiations", "Court hierarchy",
            "Specialisation", "Appeals", "Judge", "Magistrate", "Jury", "Parties", "Legal practitioners", "Cultural differences",
            "Rehabilitation", "Punishment", "Deterrence", "General deterrence", "Specific deterrence", "Denunciation",
            "Protection", "Fines", "Community correction orders", "Imprisonment", "Aggravating factors", "Mitigating factors",
            "Guilty pleas", "Mediation", "Conciliation", "Arbitration", "Administrative convenience", "Case management",
            "Class actions", "Consumer Affairs Victoria", "Victorian Civil and Administrative Tribunal", "Damages",
            "Injunctions", "Limitation of actions", "Enforcement issues", "Crown", "Houses of Parliament", "Exclusive powers",
            "Concurrent powers", "Residual powers", "Section 109", "High Court", "Bicameral structure", "International pressures",
            "Representative nature", "Representative government", "Separation of powers", "Legislative powers", "Executive powers",
            "Judicial powers", "Express protection of rights", "Statutory interpretation", "Doctrine of precedent",
            "Binding precedent", "Persuasive precedent", "Reversing precedent", "Overruling precedent", "Distinguishing precedent",
            "Disapproving precedent", "Judicial conservatism", "Judicial activism", "Standing", "Supremacy of parliament",
            "Codification", "Abrogation", "Common law", "Petitions", "Demonstrations", "Social media", "Victorian Law Reform Commission",
            "Royal Commissions", "Parliamentary committees", "Referendum", "Double majority", "1967 referendum", "First Nations Voice",
            "Uluru Statement from the Heart", "Law reform", "Constitutional reform", "Civil justice system", "Criminal justice system",
            "Sanctions", "Remedies", "Accused", "Victims", "Principles of justice"
        ];

        let ws = new WebSocket('ws://localhost:8080');
        let myName, myAvatar, isTeacher = false;
        let currentTerm = '';
        let drawing = false;
        let ctx, canvas;
        let scores = {};
        let players = [];
        let gameActive = false;
        let timerInterval;
        let timeLeft = 30;
        let drawerId = null;

        ws.onopen = () => console.log('Connected to server');
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            handleMessage(data);
        };
        ws.onclose = () => console.log('Disconnected');

        function joinGame() {
            myName = document.getElementById('name').value.trim();
            myAvatar = document.getElementById('avatar').value;
            isTeacher = myName.toLowerCase() === 'teacher';
            ws.send(JSON.stringify({ type: 'join', name: myName, avatar: myAvatar }));
            document.getElementById('login').style.display = 'none';
            document.getElementById('game').style.display = 'block';
            canvas = document.getElementById('canvas');
            ctx = canvas.getContext('2d');
            setupCanvas();
        }

        function handleMessage(data) {
            switch (data.type) {
                case 'players':
                    players = data.players;
                    updatePlayers();
                    break;
                case 'scores':
                    scores = data.scores;
                    updateScores();
                    break;
                case 'termOptions':
                    if (data.drawerId === myName) {
                        showTermOptions(data.options);
                    }
                    break;
                case 'currentTerm':
                    currentTerm = data.term;
                    document.getElementById('currentTerm').innerText = isTeacher ? `Drawer: ${data.drawer}, Term: ${currentTerm}` : 'Guess the term above!';
                    document.getElementById('currentTerm').style.display = 'block';
                    if (data.drawerId === myName) {
                        document.getElementById('clearBtn').classList.remove('hidden');
                        document.getElementById('guessInput').classList.add('hidden');
                        document.getElementById('guessBtn').classList.add('hidden');
                    } else {
                        document.getElementById('clearBtn').classList.add('hidden');
                        document.getElementById('guessInput').classList.remove('hidden');
                        document.getElementById('guessBtn').classList.remove('hidden');
                    }
                    break;
                case 'startRound':
                    timeLeft = 30;
                    drawerId = data.drawerId;
                    startTimer();
                    break;
                case 'guessCorrect':
                    addChat(`${data.player} guessed correctly! +${data.points} points`);
                    if (data.player === myName) {
                        // Points already added on server
                    }
                    break;
                case 'drawing':
                    if (data.drawerId !== myName) {
                        drawLine(data.x, data.y, data.prevX, data.prevY);
                    }
                    break;
                case 'clear':
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    break;
                case 'gameStopped':
                    gameActive = false;
                    stopTimer();
                    addChat('Game stopped by teacher.');
                    break;
            }
        }

        function setupCanvas() {
            canvas.addEventListener('mousedown', (e) => {
                drawing = true;
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                ctx.beginPath();
                ctx.moveTo(x, y);
                prevX = x;
                prevY = y;
            });

            canvas.addEventListener('mousemove', (e) => {
                if (!drawing) return;
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                drawLine(prevX, prevY, x, y);
                ws.send(JSON.stringify({ type: 'draw', x, y, prevX, prevY, drawerId: myName }));
                prevX = x;
                prevY = y;
            });

            canvas.addEventListener('mouseup', () => drawing = false);
            canvas.addEventListener('mouseout', () => drawing = false);
        }

        let prevX, prevY;
        function drawLine(fromX, fromY, toX, toY) {
            ctx.lineTo(toX, toY);
            ctx.strokeStyle = '#000';
            ctx.lineWidth = 2;
            ctx.stroke();
        }

        function clearCanvas() {
            ws.send(JSON.stringify({ type: 'clear' }));
        }

        function submitGuess() {
            const guess = document.getElementById('guessInput').value.trim().toLowerCase();
            if (guess) {
                ws.send(JSON.stringify({ type: 'guess', guess, player: myName }));
                document.getElementById('guessInput').value = '';
            }
        }

        function showTermOptions(options) {
            const div = document.getElementById('termOptions');
            div.innerHTML = options.map((term, i) => `<button class="term" onclick="selectTerm('${term}')">${term}</button>`).join('');
            div.style.display = 'block';
        }

        function selectTerm(term) {
            currentTerm = term;
            ws.send(JSON.stringify({ type: 'selectTerm', term, drawerId: myName }));
            document.getElementById('termOptions').style.display = 'none';
            document.getElementById('currentTerm').innerText = 'Draw the term!';
            document.getElementById('currentTerm').style.display = 'block';
        }

        function startGame() {
            if (isTeacher) {
                ws.send(JSON.stringify({ type: 'startGame' }));
            }
        }

        function stopGame() {
            if (isTeacher) {
                ws.send(JSON.stringify({ type: 'stopGame' }));
            }
        }

        function startTimer() {
            timerInterval = setInterval(() => {
                timeLeft--;
                document.getElementById('timer').innerText = `Time left: ${timeLeft}s`;
                if (timeLeft <= 0) {
                    stopTimer();
                    // Next round after delay
                    setTimeout(() => ws.send(JSON.stringify({ type: 'nextRound' })), 2000);
                }
            }, 1000);
        }

        function stopTimer() {
            clearInterval(timerInterval);
            document.getElementById('timer').innerText = '';
        }

        function updatePlayers() {
            document.getElementById('players').innerHTML = '<h3>Players:</h3>' + players.map(p => `<div class="player">${p.avatar} ${p.name}</div>`).join('');
        }

        function updateScores() {
            document.getElementById('scores').innerHTML = '<h3>Scores:</h3>' + Object.entries(scores).map(([name, score]) => `<div class="score">${name}: ${score}</div>`).join('');
        }

        function addChat(message) {
            const chat = document.getElementById('chat');
            chat.innerHTML += `<p>${message}</p>`;
            chat.scrollTop = chat.scrollHeight;
        }

        // Keyboard enter for guess
        document.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !document.getElementById('guessInput').classList.contains('hidden')) {
                submitGuess();
            }
        });

        if (isTeacher) {
            document.getElementById('startBtn').classList.remove('hidden');
            document.getElementById('stopBtn').classList.remove('hidden');
        }
    </script>
</body>
</html>
