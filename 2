<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firebase Config Fix</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #f7f7f9; }
    </style>
</head>
<body class="p-8 min-h-screen flex items-start justify-center">

    <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-lg">
        <h1 class="text-3xl font-bold text-gray-800 mb-6 border-b pb-3">Firebase Authentication Status</h1>
        <p class="text-lg text-gray-600 mb-6">
            This component demonstrates the correct initialization of the Firebase app and authentication using the required global variables.
        </p>

        <!-- Status Box -->
        <div id="status" class="p-4 rounded-lg bg-red-100 border border-red-400 text-red-800 font-medium animate-pulse">
            Initializing Firebase...
        </div>

        <!-- Instructions for the user -->
        <div class="mt-8">
            <h2 class="text-xl font-semibold text-gray-700 mb-2">Details:</h2>
            <ul class="list-disc list-inside space-y-2 text-sm text-gray-600">
                <li>Uses **`__firebase_config`** to initialize the app.</li>
                <li>Uses the mandatory **`__initial_auth_token`** for custom sign-in.</li>
                <li>A fallback to anonymous sign-in is used if the token is missing.</li>
                <li>Displays the authenticated **User ID** and **App ID** upon success.</li>
                <li>Firestore logging is set to 'debug' for better error visibility.</li>
            </ul>
        </div>
    </div>

    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const statusElement = document.getElementById('status');

        // --- MANDATORY: ACCESS AND PARSE GLOBAL CONFIG VARIABLES ---
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let firebaseConfig;
        
        try {
            // Check if the config string is available
            const firebaseConfigString = typeof __firebase_config !== 'undefined' ? __firebase_config : null;
            
            if (!firebaseConfigString || firebaseConfigString.includes("YOUR_FIREBASE_CONFIG_JSON")) {
                statusElement.className = "p-4 rounded-lg bg-yellow-100 border border-yellow-400 text-yellow-800 font-medium";
                statusElement.innerHTML = '⚠️ Firebase config is missing or a placeholder. Cannot initialize Firestore.';
                console.error("Firebase config not available or is placeholder. Multiplayer functionality will be disabled.");
                // We stop execution here as the database cannot be connected
                throw new Error("Missing or invalid Firebase config");
            }

            // Parse the JSON string configuration
            firebaseConfig = JSON.parse(firebaseConfigString);

        } catch (e) {
            console.error("Initialization Failed:", e.message);
            return; // Exit script if config is invalid
        }
        
        // Set debug level for better logging
        setLogLevel('debug');

        // Initialize Firebase services
        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);

        // Function to handle authentication
        async function authenticate() {
            try {
                if (initialAuthToken) {
                    // MANDATORY: Use the provided custom token
                    await signInWithCustomToken(auth, initialAuthToken);
                    console.log("Signed in with custom token successfully.");
                } else {
                    // Fallback to anonymous sign-in if token is missing (e.g., in a non-Canvas test environment)
                    await signInAnonymously(auth);
                    console.log("Signed in anonymously (no custom token provided).");
                }
            } catch (error) {
                statusElement.className = "p-4 rounded-lg bg-red-100 border border-red-400 text-red-800 font-medium";
                statusElement.innerHTML = `❌ Auth Failed: ${error.message}`;
                console.error("Authentication failed:", error);
            }
        }

        // Auth state change listener to update the UI once signed in
        onAuthStateChanged(auth, (user) => {
            if (user) {
                const userId = user.uid;
                statusElement.className = "p-4 rounded-lg bg-green-100 border border-green-400 text-green-800 font-medium";
                statusElement.innerHTML = `
                    <span class="font-bold">✅ Success! Firebase is ready.</span><br>
                    <span class="text-sm">App ID: <code class="bg-green-200 p-1 rounded-md text-green-900">${appId}</code></span><br>
                    <span class="text-sm">User ID: <code class="bg-green-200 p-1 rounded-md text-green-900">${userId}</code></span>
                `;
            } else {
                statusElement.textContent = 'Awaiting authentication...';
            }
        });

        // Start the authentication process
        authenticate();
    </script>
</body>
</html>
